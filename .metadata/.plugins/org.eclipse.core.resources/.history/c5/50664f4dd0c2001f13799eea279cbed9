package com.employee.springbootmvc.controller;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.employee.springbootmvc.employeemodel.EmployeeModel;
import com.employee.springbootmvc.entity.EmployeeEntity;
import com.employee.springbootmvc.service.EmployeeService;

import jakarta.validation.Valid;

import org.springframework.web.bind.annotation.RequestParam;


@org.springframework.stereotype.Controller
public class EmployeeController {
	    @Autowired
	    EmployeeService employeeService;
	
	
	    // to get the employee form
	    @GetMapping("/employee")
	    public String getEmployee()
	    {
	      	return "employee";
	    }
	
	    // to send the employee data
	    @PostMapping("/submit")
	    public String sendEmployeeForm(@Valid EmployeeModel employeeModel, BindingResult bindingResult, Model model)
	    {
	    	HashMap<String, String> validationErrors = new HashMap<String, String>();
	    	
	    	if(bindingResult.hasErrors())
	    	{
	    		for(FieldError fieldError : bindingResult.getFieldErrors())
	    		{
	    			validationErrors.put(fieldError.getField(), fieldError.getDefaultMessage());
	    		}
	    		
	    		
	    		model.addAttribute("validationErrors", validationErrors);
	    		return "employee";
	    	}
	    	
	    	
		    employeeService.saveEmployeeData(employeeModel);
		    return "redirect:/EmployeeDetails";
	    }
	    
	    
	    // to get all the employee details
	    @GetMapping("/getemployeedetails")
	    public String getEmployeeDetails(Model model)
	    {
	    	List<EmployeeEntity> employee = employeeService.getEmployeeDetails();
	    	
	    	model.addAttribute("Employees", employee);
	    	return "EmployeeDetails";
	    }
	    
	    
	    
	    // get the search form
	    @GetMapping("/getsearchform")
	    public String getSearchForm()
	    {
	    	return "SearchEmployee";
	    }
	    
	    
	    @PostMapping("/searchform")
	    public String searchEmployeeById(@RequestParam int id, Model model)
	    {
	    	EmployeeEntity employee = employeeService.searchEmployeeById(id);  
	    	
	    	 model.addAttribute("Employee", employee);
	         return "SearchEmployee";
        }
	    
	    
	    
	    // delete employee details 
	    @GetMapping("/delete/{id}")
	    public String deleteEmployeeDetails(@PathVariable int id)
	    {
	    	employeeService.deleteEmployeeById(id);
	    	return "redirect:/getemployeedetails";
	    }
	    
	    
	    // edit employee details
	    @GetMapping("/edit/{id}")
	    public String editById(@PathVariable int id, Model model)
	    {
	    	 EmployeeModel employeeModel = employeeService.editById(id);
	    	 
	    	 model.addAttribute("EmployeeModel", employeeModel);
	    	 model.addAttribute("id", id);
	    	return "edit-employee";
	    }
	    
	    
	    
	    // to update the employee data
	    @PostMapping("/editSaveEmployee/{id}")
	    public String updateEmployeeById(@PathVariable int id, EmployeeModel employeeModel)
	    {
	    	employeeService.updateEmployeeById(id,employeeModel);
	    	return "redirect:/getemployeedetails";
	    }
	    
  }